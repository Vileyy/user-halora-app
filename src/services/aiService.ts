import axios from "axios";

export interface ChatMessage {
  id: string;
  text: string;
  isUser: boolean;
  timestamp: Date;
}

export interface ProductRecommendation {
  id: string;
  name: string;
  price: string;
  image: string;
  description: string;
  category: string;
  reason: string;
  confidence: number;
}

export interface BeautyAdviceResponse {
  advice: string;
  recommendedProducts?: ProductRecommendation[];
  skinType?: string;
  concerns?: string[];
}

// AI API configuration
const AI_API_CONFIG = {
  openai: {
    baseURL: "https://api.openai.com/v1",
    model: "gpt-3.5-turbo",
    apiKey: process.env.EXPO_PUBLIC_OPENAI_API_KEY || "",
  },
  // Gemini API
  gemini: {
    baseURL: "https://generativelanguage.googleapis.com/v1beta",
    model: "gemini-1.5-flash",
    apiKey:
      process.env.EXPO_PUBLIC_GEMINI_API_KEY ||
      "AIzaSyBcd8kxN9w_reBKovGp77VQQJWDnTif3a0",
  },
};

class AIService {
  private currentProvider: "openai" | "gemini" = "gemini";
  private lastRequestTime: number = 0;
  private minRequestInterval: number = 2000;

  /**
   * Wait for rate limit cooldown
   */
  private async waitForRateLimit(): Promise<void> {
    const now = Date.now();
    const timeSinceLastRequest = now - this.lastRequestTime;

    if (timeSinceLastRequest < this.minRequestInterval) {
      const waitTime = this.minRequestInterval - timeSinceLastRequest;
      // console.log(`‚è≥ Rate limit: waiting ${waitTime}ms...`);
      await new Promise((resolve) => setTimeout(resolve, waitTime));
    }

    this.lastRequestTime = Date.now();
  }

  /**
   * Call API to get cosmetic advice
   */
  async getCosmeticAdvice(
    userMessage: string,
    userInfo?: {
      skinType?: string;
      age?: number;
      concerns?: string[];
      currentProducts?: string[];
    },
    availableProducts?: any[]
  ): Promise<BeautyAdviceResponse> {
    try {
      // Wait for rate limit
      await this.waitForRateLimit();

      const prompt = this.buildCosmeticAdvicePrompt(
        userMessage,
        userInfo,
        availableProducts
      );

      if (this.currentProvider === "openai") {
        const response = await this.callOpenAI(prompt);
        return {
          ...response,
          recommendedProducts: this.findMatchingProducts(
            userMessage,
            availableProducts || []
          ),
        };
      } else {
        const response = await this.callGemini(prompt);
        if (response) {
          return {
            ...response,
            recommendedProducts: this.findMatchingProducts(
              userMessage,
              availableProducts || []
            ),
          };
        } else {
          throw new Error("API failed, using offline advice");
        }
      }
    } catch (error) {
      console.error("AI Service Error:", error);
      return {
        advice: this.getOfflineAdvice(userMessage),
        recommendedProducts: this.findMatchingProducts(
          userMessage,
          availableProducts || []
        ),
      };
    }
  }

  /**
   * Offline advice khi AI kh√¥ng ho·∫°t ƒë·ªông
   */
  private getOfflineAdvice(userMessage: string): string {
    const lowerMessage = userMessage.toLowerCase();

    if (lowerMessage.includes("t·∫©y trang")) {
      return `üß¥ **T∆∞ v·∫•n v·ªÅ t·∫©y trang:**

ƒê·ªÉ ch·ªçn s·∫£n ph·∫©m t·∫©y trang ph√π h·ª£p:

‚Ä¢ **Da d·∫ßu**: Gel t·∫©y trang ho·∫∑c micellar water
‚Ä¢ **Da kh√¥**: Oil cleanser ho·∫∑c s·ªØa t·∫©y trang
‚Ä¢ **Da nh·∫°y c·∫£m**: S·∫£n ph·∫©m kh√¥ng c·ªìn, pH c√¢n b·∫±ng

**C√°ch s·ª≠ d·ª•ng:**
1. Massage nh·∫π nh√†ng 30 gi√¢y
2. R·ª≠a s·∫°ch v·ªõi n∆∞·ªõc ·∫•m
3. Thoa kem d∆∞·ª°ng ·∫©m sau

B·∫°n c√≥ th·ªÉ tham kh·∫£o c√°c s·∫£n ph·∫©m t·∫©y trang ph√π h·ª£p trong c·ª≠a h√†ng c·ªßa ch√∫ng t√¥i! üí´`;
    }

    if (lowerMessage.includes("serum")) {
      return `‚ú® **T∆∞ v·∫•n v·ªÅ serum:**

Serum l√† b∆∞·ªõc quan tr·ªçng trong routine skincare:

‚Ä¢ **Vitamin C**: Ch·ªëng oxy h√≥a, d√πng bu·ªïi s√°ng
‚Ä¢ **Niacinamide**: Thu nh·ªè l·ªó ch√¢n l√¥ng, ki·ªÉm so√°t d·∫ßu
‚Ä¢ **Hyaluronic Acid**: C·∫•p ·∫©m s√¢u
‚Ä¢ **Retinol**: Ch·ªëng l√£o h√≥a, d√πng bu·ªïi t·ªëi

**Th·ª© t·ª± s·ª≠ d·ª•ng:** Toner ‚Üí Serum ‚Üí Kem d∆∞·ª°ng

H√£y xem c√°c s·∫£n ph·∫©m serum ch·∫•t l∆∞·ª£ng trong shop nh√©! üåü`;
    }

    if (
      lowerMessage.includes("kem d∆∞·ª°ng") ||
      lowerMessage.includes("d∆∞·ª°ng ·∫©m")
    ) {
      return `üíß **T∆∞ v·∫•n v·ªÅ kem d∆∞·ª°ng ·∫©m:**

Ch·ªçn kem d∆∞·ª°ng theo lo·∫°i da:

‚Ä¢ **Da d·∫ßu**: Kem d∆∞·ª°ng gel, texture nh·∫π
‚Ä¢ **Da kh√¥**: Kem d∆∞·ª°ng gi√†u ceramide, shea butter  
‚Ä¢ **Da h·ªón h·ª£p**: Kem d∆∞·ª°ng c√¢n b·∫±ng
‚Ä¢ **Da nh·∫°y c·∫£m**: Kh√¥ng m√πi, kh√¥ng c·ªìn

**Tips:** Thoa kem khi da c√≤n ·∫©m ƒë·ªÉ lock moisture t·ªët h∆°n!

Kh√°m ph√° b·ªô s∆∞u t·∫≠p kem d∆∞·ª°ng ƒëa d·∫°ng c·ªßa ch√∫ng t√¥i! üß¥`;
    }

    // Default response
    return `üëã **Xin ch√†o!**

C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá v·ªõi tr·ª£ l√Ω t∆∞ v·∫•n m·ªπ ph·∫©m Halora! 

Hi·ªán t·∫°i h·ªá th·ªëng AI ƒëang b·∫£o tr√¨ (do rate limit), nh∆∞ng b·∫°n v·∫´n c√≥ th·ªÉ:

üõçÔ∏è **Xem s·∫£n ph·∫©m** ƒë∆∞·ª£c g·ª£i √Ω d∆∞·ªõi ƒë√¢y
üîç **T√¨m ki·∫øm** s·∫£n ph·∫©m theo danh m·ª•c  
üí¨ **Li√™n h·ªá** nh√¢n vi√™n t∆∞ v·∫•n qua hotline
üìñ **ƒê·ªçc** reviews t·ª´ kh√°ch h√†ng kh√°c

Vui l√≤ng ƒë·ª£i 5-10 ph√∫t ƒë·ªÉ h·ªá th·ªëng AI ho·∫°t ƒë·ªông tr·ªü l·∫°i! ‚ú®`;
  }

  /**
   * L·∫•y g·ª£i √Ω s·∫£n ph·∫©m th√¥ng minh d·ª±a tr√™n l·ªãch s·ª≠ v√† preferences
   */
  async getSmartRecommendations(
    userId: string,
    currentProducts: any[],
    userBehavior: {
      viewedProducts?: string[];
      purchaseHistory?: string[];
      favorites?: string[];
      searchHistory?: string[];
    },
    existingRecommendations: string[] = []
  ): Promise<ProductRecommendation[]> {
    try {
      // Wait for rate limit
      await this.waitForRateLimit();

      // L·ªçc b·ªè s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t v√† ƒë√£ mua
      const excludedIds = new Set([
        ...existingRecommendations,
        ...(userBehavior.purchaseHistory || []),
        ...(userBehavior.viewedProducts || []).slice(0, 3), 
      ]);

      const availableProducts = currentProducts.filter(
        (product) => !excludedIds.has(product.id)
      );

      // console.log("üîç Generating recommendations:", {
      //   totalProducts: currentProducts.length,
      //   availableAfterFilter: availableProducts.length,
      //   excludedCount: excludedIds.size,
      //   purchaseHistory: userBehavior.purchaseHistory?.slice(0, 3),
      // });

      // T·∫°o recommendations d·ª±a tr√™n l·ªãch s·ª≠ mua h√†ng
      let recommendations = this.getRecommendationsBasedOnPurchaseHistory(
        availableProducts,
        userBehavior.purchaseHistory || []
      );

      // N·∫øu kh√¥ng ƒë·ªß t·ª´ purchase history, th√™m t·ª´ viewed products
      if (recommendations.length < 5) {
        const viewedBasedRecs = this.getRecommendationsBasedOnViewed(
          availableProducts,
          userBehavior.viewedProducts || [],
          recommendations.map((r) => r.id)
        );
        recommendations = [...recommendations, ...viewedBasedRecs];
      }

      // N·∫øu v·∫´n kh√¥ng ƒë·ªß, d√πng AI ho·∫∑c fallback
      if (recommendations.length < 5) {
        const prompt = this.buildRecommendationPrompt(
          availableProducts,
          userBehavior
        );

        if (this.currentProvider === "openai") {
          const response = await this.callOpenAI(prompt);
          const aiRecs = this.parseRecommendations(
            response.advice,
            availableProducts
          );
          recommendations = [...recommendations, ...aiRecs];
        } else {
          const response = await this.callGemini(prompt);
          if (response) {
            const aiRecs = this.parseRecommendations(
              response.advice,
              availableProducts
            );
            recommendations = [...recommendations, ...aiRecs];
          } else {
            const fallbackRecs =
              this.getFallbackRecommendations(availableProducts);
            recommendations = [...recommendations, ...fallbackRecs];
          }
        }
      }

      // N·∫øu v·∫´n ch∆∞a c√≥ g√¨ (user m·ªõi ho√†n to√†n), t·∫°o popular recommendations
      if (recommendations.length === 0 && availableProducts.length > 0) {
        // console.log(
        //   "üÜï New user detected, generating popular product recommendations"
        // );
        recommendations =
          this.getPopularProductRecommendations(availableProducts);
      }

      // Lo·∫°i b·ªè duplicate v√† gi·ªõi h·∫°n s·ªë l∆∞·ª£ng
      const uniqueRecommendations =
        this.removeDuplicateRecommendations(recommendations);
      return uniqueRecommendations.slice(0, 5);
    } catch (error) {
      console.error("Smart Recommendations Error:", error);
      const availableProducts = currentProducts.filter(
        (product) => !existingRecommendations.includes(product.id)
      );
      return this.getFallbackRecommendations(availableProducts);
    }
  }

  /**
   * G·ªçi OpenAI API
   */
  private async callOpenAI(prompt: string): Promise<BeautyAdviceResponse> {
    const config = AI_API_CONFIG.openai;

    const response = await axios.post(
      `${config.baseURL}/chat/completions`,
      {
        model: config.model,
        messages: [
          {
            role: "system",
            content:
              "B·∫°n l√† chuy√™n gia t∆∞ v·∫•n m·ªπ ph·∫©m chuy√™n nghi·ªáp. H√£y ƒë∆∞a ra l·ªùi khuy√™n h·ªØu √≠ch, an to√†n v√† ph√π h·ª£p v·ªõi t·ª´ng lo·∫°i da.",
          },
          {
            role: "user",
            content: prompt,
          },
        ],
        max_tokens: 500,
        temperature: 0.7,
      },
      {
        headers: {
          Authorization: `Bearer ${config.apiKey}`,
          "Content-Type": "application/json",
        },
      }
    );

    return {
      advice: response.data.choices[0].message.content,
      skinType: this.extractSkinType(response.data.choices[0].message.content),
      concerns: this.extractConcerns(response.data.choices[0].message.content),
    };
  }

  /**
   * G·ªçi Gemini API v·ªõi fallback endpoints
   */
  private async callGemini(prompt: string): Promise<BeautyAdviceResponse> {
    const config = AI_API_CONFIG.gemini;

    // Debug logs
    // console.log("üîß Gemini API Config:", {
    //   apiKey: config.apiKey.substring(0, 10) + "...",
    //   model: config.model,
    //   baseURL: config.baseURL,
    // });

    // use the most stable endpoint
    const endpoints = [
      {
        baseURL: "https://generativelanguage.googleapis.com/v1beta",
        model: "gemini-1.5-flash",
      },
    ];

    const payload = {
      contents: [
        {
          parts: [
            {
              text: `B·∫°n l√† chuy√™n gia t∆∞ v·∫•n m·ªπ ph·∫©m chuy√™n nghi·ªáp. H√£y ƒë∆∞a ra l·ªùi khuy√™n h·ªØu √≠ch, an to√†n v√† ph√π h·ª£p v·ªõi t·ª´ng lo·∫°i da. ${prompt}`,
            },
          ],
        },
      ],
      generationConfig: {
        temperature: 0.7,
        maxOutputTokens: 500,
        topK: 40,
        topP: 0.95,
      },
      safetySettings: [
        {
          category: "HARM_CATEGORY_HARASSMENT",
          threshold: "BLOCK_MEDIUM_AND_ABOVE",
        },
        {
          category: "HARM_CATEGORY_HATE_SPEECH",
          threshold: "BLOCK_MEDIUM_AND_ABOVE",
        },
      ],
    };

    // try each endpoint until success
    for (const endpoint of endpoints) {
      try {
        const url = `${endpoint.baseURL}/models/${endpoint.model}:generateContent?key=${config.apiKey}`;
        // console.log("üîó Trying URL:", url);

        const response = await axios.post(url, payload, {
          headers: {
            "Content-Type": "application/json",
          },
          timeout: 10000,
        });

        const advice = response.data.candidates[0].content.parts[0].text;
        // console.log("‚úÖ Gemini API Success with:", endpoint.model);

        return {
          advice,
          skinType: this.extractSkinType(advice),
          concerns: this.extractConcerns(advice),
        };
      } catch (error: any) {
        const status = error.response?.status;
        // console.log(
        //   `‚ùå Failed with ${endpoint.model}:`,
        //   status || error.message
        // );

        if (status === 429) {
          // console.log("‚ö†Ô∏è Rate limit exceeded, will use offline advice");
          break;
        } else if (status === 403) {
          // console.log("‚ö†Ô∏è API key invalid, will use offline advice");
          break;
        } else if (status === 404) {
          // console.log("‚ùå Endpoint kh√¥ng t·ªìn t·∫°i, th·ª≠ endpoint kh√°c...");
          continue;
        }

        // console.log(`‚ö†Ô∏è API Error ${status}, will use offline advice`);
        break;
      }
    }
    return null as any;
  }

  /**
   * X√¢y d·ª±ng prompt cho t∆∞ v·∫•n m·ªπ ph·∫©m
   */
  private buildCosmeticAdvicePrompt(
    userMessage: string,
    userInfo?: {
      skinType?: string;
      age?: number;
      concerns?: string[];
      currentProducts?: string[];
    },
    availableProducts?: any[]
  ): string {
    let prompt = `Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}"\n\n`;

    if (userInfo) {
      if (userInfo.skinType) {
        prompt += `Lo·∫°i da: ${userInfo.skinType}\n`;
      }
      if (userInfo.age) {
        prompt += `Tu·ªïi: ${userInfo.age}\n`;
      }
      if (userInfo.concerns?.length) {
        prompt += `V·∫•n ƒë·ªÅ da: ${userInfo.concerns.join(", ")}\n`;
      }
      if (userInfo.currentProducts?.length) {
        prompt += `S·∫£n ph·∫©m ƒëang d√πng: ${userInfo.currentProducts.join(
          ", "
        )}\n`;
      }
    }

    // Th√™m th√¥ng tin s·∫£n ph·∫©m c√≥ s·∫µn n·∫øu user h·ªèi v·ªÅ s·∫£n ph·∫©m c·ª• th·ªÉ
    if (availableProducts && availableProducts.length > 0) {
      const productKeywords = this.extractProductKeywords(userMessage);
      const relevantProducts = availableProducts
        .filter((product) =>
          productKeywords.some(
            (keyword) =>
              product.name?.toLowerCase().includes(keyword.toLowerCase()) ||
              product.category?.toLowerCase().includes(keyword.toLowerCase()) ||
              product.description?.toLowerCase().includes(keyword.toLowerCase())
          )
        )
        .slice(0, 5);

      if (relevantProducts.length > 0) {
        prompt += `\nS·∫£n ph·∫©m c√≥ s·∫µn trong c·ª≠a h√†ng:\n`;
        relevantProducts.forEach((product, index) => {
          prompt += `${index + 1}. ${
            product.name
          } - ${this.getFirstVariantPrice(product)} VNƒê\n`;
          prompt += `   M√¥ t·∫£: ${product.description || "Kh√¥ng c√≥ m√¥ t·∫£"}\n`;
        });
        prompt += `\nH√£y ƒë·ªÅ xu·∫•t s·∫£n ph·∫©m ph√π h·ª£p t·ª´ danh s√°ch tr√™n n·∫øu c√≥.\n`;
      }
    }

    prompt += `\nH√£y ƒë∆∞a ra l·ªùi khuy√™n chi ti·∫øt, an to√†n v√† ph√π h·ª£p. T·∫≠p trung v√†o:
1. Ph√¢n t√≠ch v·∫•n ƒë·ªÅ v√† nhu c·∫ßu
2. ƒê·ªÅ xu·∫•t gi·∫£i ph√°p c·ª• th·ªÉ
3. Th√†nh ph·∫ßn n√™n t√¨m ki·∫øm
4. L∆∞u √Ω khi s·ª≠ d·ª•ng
5. Routine chƒÉm s√≥c da ph√π h·ª£p
6. G·ª£i √Ω s·∫£n ph·∫©m c·ª• th·ªÉ t·ª´ c·ª≠a h√†ng (n·∫øu c√≥)

Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, ng·∫Øn g·ªçn nh∆∞ng ƒë·∫ßy ƒë·ªß th√¥ng tin.`;

    return prompt;
  }

  /**
   * X√¢y d·ª±ng prompt cho recommendations
   */
  private buildRecommendationPrompt(
    currentProducts: any[],
    userBehavior: any
  ): string {
    const productCategories = [
      ...new Set(currentProducts.map((p) => p.category)),
    ];
    const viewedCategories = userBehavior.viewedProducts || [];

    return `D·ª±a tr√™n h√†nh vi ng∆∞·ªùi d√πng:
- Danh m·ª•c s·∫£n ph·∫©m hi·ªán c√≥: ${productCategories.join(", ")}
- S·∫£n ph·∫©m ƒë√£ xem: ${viewedCategories.slice(0, 5).join(", ")}
- L·ªãch s·ª≠ t√¨m ki·∫øm: ${
      userBehavior.searchHistory?.slice(0, 3).join(", ") || "kh√¥ng c√≥"
    }

H√£y g·ª£i √Ω 3-5 s·∫£n ph·∫©m m·ªπ ph·∫©m ph√π h·ª£p nh·∫•t v·ªõi format:
[T√äN S·∫¢N PH·∫®M] - [L√ù DO ƒê·ªÄ XU·∫§T] - [ƒê·ªò TIN C·∫¨Y 0-1]

V√≠ d·ª•:
Kem d∆∞·ª°ng ·∫©m Vitamin C - Ph√π h·ª£p v·ªõi da kh√¥, b·ªï sung vitamin - 0.9`;
  }

  /**
   * Parse recommendations t·ª´ AI response
   */
  private parseRecommendations(
    aiResponse: string,
    availableProducts: any[]
  ): ProductRecommendation[] {
    const recommendations: ProductRecommendation[] = [];
    const lines = aiResponse.split("\n").filter((line) => line.includes("-"));

    lines.forEach((line, index) => {
      if (index >= 5) return;

      const parts = line.split("-");
      if (parts.length >= 2) {
        const matchedProduct = this.findSimilarProduct(
          parts[0].trim(),
          availableProducts
        );

        if (matchedProduct) {
          recommendations.push({
            ...matchedProduct,
            reason: parts[1]?.trim() || "ƒê∆∞·ª£c AI ƒë·ªÅ xu·∫•t",
            confidence: parseFloat(parts[2]?.trim()) || 0.8,
          });
        }
      }
    });

    return recommendations;
  }

  /**
   * T√¨m s·∫£n ph·∫©m t∆∞∆°ng t·ª± trong database
   */
  private findSimilarProduct(searchTerm: string, products: any[]): any | null {
    const normalized = searchTerm.toLowerCase();
    let found = products.find((p) => p.name.toLowerCase().includes(normalized));
    if (!found) {
      const categories = ["serum", "cream", "kem", "s·ªØa", "toner", "mask"];
      const matchedCategory = categories.find((cat) =>
        normalized.includes(cat)
      );

      if (matchedCategory) {
        const categoryProducts = products.filter(
          (p) =>
            p.category?.toLowerCase().includes(matchedCategory) ||
            p.name.toLowerCase().includes(matchedCategory)
        );
        found =
          categoryProducts[Math.floor(Math.random() * categoryProducts.length)];
      }
    }

    return found || null;
  }

  /**
   * Fallback recommendations khi AI kh√¥ng kh·∫£ d·ª•ng
   */
  private getFallbackRecommendations(products: any[]): ProductRecommendation[] {
    const shuffled = [...products].sort(() => 0.5 - Math.random());

    return shuffled.slice(0, 5).map((product) => ({
      ...product,
      reason: "S·∫£n ph·∫©m ph·ªï bi·∫øn",
      confidence: 0.6,
    }));
  }

  /**
   * T·∫°o g·ª£i √Ω cho user m·ªõi d·ª±a tr√™n s·∫£n ph·∫©m ph·ªï bi·∫øn v√† ƒëa d·∫°ng category
   */
  private getPopularProductRecommendations(
    products: any[]
  ): ProductRecommendation[] {
    if (!products || products.length === 0) return [];

    // console.log("üåü Creating popular product recommendations for new user");

    // Ph√¢n lo·∫°i s·∫£n ph·∫©m theo category
    const productsByCategory = products.reduce((acc: any, product: any) => {
      const category = product.category?.toLowerCase() || "other";
      if (!acc[category]) acc[category] = [];
      acc[category].push(product);
      return acc;
    }, {});

    const recommendations: ProductRecommendation[] = [];

    // ∆Øu ti√™n c√°c category ph·ªï bi·∫øn
    const popularCategories = [
      "skincare",
      "t·∫©y trang",
      "serum",
      "kem d∆∞·ª°ng",
      "toner",
      "makeup",
      "son m√¥i",
      "kem n·ªÅn",
      "ph·∫•n",
      "chƒÉm s√≥c t√≥c",
      "d·∫ßu g·ªôi",
      "d·∫ßu x·∫£",
    ];

    // L·∫•y 1-2 s·∫£n ph·∫©m t·ª´ m·ªói category ph·ªï bi·∫øn
    for (const category of popularCategories) {
      const categoryProducts = productsByCategory[category];
      if (categoryProducts && categoryProducts.length > 0) {
        // S·∫Øp x·∫øp theo gi√° (trung b√¨nh tr∆∞·ªõc) ƒë·ªÉ ph√π h·ª£p v·ªõi nhi·ªÅu user
        const sortedProducts = categoryProducts.sort((a: any, b: any) => {
          const priceA = parseInt(
            a.price?.toString().replace(/\D/g, "") || "0"
          );
          const priceB = parseInt(
            b.price?.toString().replace(/\D/g, "") || "0"
          );
          return priceA - priceB; // Gi√° th·∫•p tr∆∞·ªõc
        });

        // L·∫•y 1 s·∫£n ph·∫©m t·ª´ category n√†y
        const selectedProduct = sortedProducts[0];
        recommendations.push({
          id: selectedProduct.id,
          name: selectedProduct.name,
          price: this.getFirstVariantPrice(selectedProduct),
          image:
            selectedProduct.image ||
            selectedProduct.images?.[0] ||
            this.generatePlaceholderImage(selectedProduct.name),
          description: selectedProduct.description || "",
          category: selectedProduct.category || "",
          reason: this.generateNewUserReason(category),
          confidence: 0.7,
        });

        if (recommendations.length >= 5) break;
      }
    }

    // N·∫øu v·∫´n ch∆∞a ƒë·ªß 5, l·∫•y random t·ª´ c√°c s·∫£n ph·∫©m c√≤n l·∫°i
    if (recommendations.length < 5) {
      const usedIds = new Set(recommendations.map((r) => r.id));
      const remainingProducts = products.filter((p) => !usedIds.has(p.id));
      const shuffled = remainingProducts.sort(() => 0.5 - Math.random());

      for (const product of shuffled.slice(0, 5 - recommendations.length)) {
        recommendations.push({
          id: product.id,
          name: product.name,
          price: this.getFirstVariantPrice(product),
          image:
            product.image ||
            product.images?.[0] ||
            this.generatePlaceholderImage(product.name),
          description: product.description || "",
          category: product.category || "",
          reason: "S·∫£n ph·∫©m ƒë∆∞·ª£c y√™u th√≠ch",
          confidence: 0.65,
        });
      }
    }

    // console.log(
    //   `üåü Generated ${recommendations.length} popular recommendations`
    // );
    return recommendations;
  }

  /**
   * T·∫°o l√Ω do ƒë·ªÅ xu·∫•t cho user m·ªõi theo category
   */
  private generateNewUserReason(category: string): string {
    const reasonMap: { [key: string]: string } = {
      skincare: "S·∫£n ph·∫©m chƒÉm s√≥c da c∆° b·∫£n",
      "t·∫©y trang": "B∆∞·ªõc ƒë·∫ßu ti√™n trong skincare routine",
      serum: "Tinh ch·∫•t d∆∞·ª°ng da hi·ªáu qu·∫£",
      "kem d∆∞·ª°ng": "C·∫ßn thi·∫øt cho m·ªçi lo·∫°i da",
      toner: "C√¢n b·∫±ng ƒë·ªô pH cho da",
      makeup: "Trang ƒëi·ªÉm t·ª± nhi√™n h√†ng ng√†y",
      "son m√¥i": "ƒêi·ªÉm nh·∫•n cho ƒë√¥i m√¥i",
      "kem n·ªÅn": "N·ªÅn trang ƒëi·ªÉm ho√†n h·∫£o",
      ph·∫•n: "Ho√†n thi·ªán l·ªõp trang ƒëi·ªÉm",
      "chƒÉm s√≥c t√≥c": "ChƒÉm s√≥c t√≥c kh·ªèe m·∫°nh",
      "d·∫ßu g·ªôi": "L√†m s·∫°ch t√≥c hi·ªáu qu·∫£",
      "d·∫ßu x·∫£": "D∆∞·ª°ng t√≥c m·ªÅm m∆∞·ª£t",
      other: "S·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng ƒë∆∞·ª£c ∆∞a chu·ªông",
    };

    return reasonMap[category] || "S·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng ƒë∆∞·ª£c ∆∞a chu·ªông";
  }

  /**
   * Tr√≠ch xu·∫•t skin type t·ª´ AI response
   */
  private extractSkinType(text: string): string | undefined {
    const skinTypes = [
      "da kh√¥",
      "da d·∫ßu",
      "da h·ªón h·ª£p",
      "da nh·∫°y c·∫£m",
      "da th∆∞·ªùng",
    ];
    return skinTypes.find((type) => text.toLowerCase().includes(type));
  }

  /**
   * Tr√≠ch xu·∫•t concerns t·ª´ AI response
   */
  private extractConcerns(text: string): string[] {
    const concerns = [
      "m·ª•n",
      "n√°m",
      "th√¢m",
      "nhƒÉn",
      "l√£o h√≥a",
      "kh√¥ r√°p",
      "d·∫ßu th·ª´a",
    ];
    return concerns.filter((concern) => text.toLowerCase().includes(concern));
  }

  /**
   * Tr√≠ch xu·∫•t keywords s·∫£n ph·∫©m t·ª´ user message
   */
  private extractProductKeywords(message: string): string[] {
    const productKeywords = [
      // Skincare
      "t·∫©y trang",
      "cleanser",
      "s·ªØa r·ª≠a m·∫∑t",
      "gel r·ª≠a m·∫∑t",
      "toner",
      "n∆∞·ªõc hoa h·ªìng",
      "serum",
      "tinh ch·∫•t",
      "kem d∆∞·ª°ng",
      "moisturizer",
      "kem ch·ªëng n·∫Øng",
      "sunscreen",
      "mask",
      "m·∫∑t n·∫°",
      "kem m·∫Øt",
      "eye cream",
      "kem tr·ªã m·ª•n",
      "acne cream",
      "kem tr·∫Øng da",
      "whitening cream",

      // Makeup
      "kem n·ªÅn",
      "foundation",
      "concealer",
      "che khuy·∫øt ƒëi·ªÉm",
      "ph·∫•n ph·ªß",
      "powder",
      "m√° h·ªìng",
      "blush",
      "son m√¥i",
      "lipstick",
      "son b√≥ng",
      "lip gloss",
      "mascara",
      "eyeliner",
      "k·∫ª m·∫Øt",
      "ph·∫•n m·∫Øt",
      "eyeshadow",

      // Haircare
      "d·∫ßu g·ªôi",
      "shampoo",
      "d·∫ßu x·∫£",
      "conditioner",
      "kem ·ªß t√≥c",
      "hair mask",
      "serum t√≥c",
      "hair serum",

      // Body care
      "s·ªØa t·∫Øm",
      "body wash",
      "kem body",
      "body lotion",
      "d∆∞·ª°ng th·ªÉ",
      "body cream",
    ];

    const lowerMessage = message.toLowerCase();
    return productKeywords.filter((keyword) =>
      lowerMessage.includes(keyword.toLowerCase())
    );
  }

  /**
   * L·∫•y gi√° t·ª´ variant ƒë·∫ßu ti√™n c·ªßa s·∫£n ph·∫©m
   */
  private getFirstVariantPrice(product: any): string {
    if (
      !product.variants ||
      !Array.isArray(product.variants) ||
      product.variants.length === 0
    ) {
      return "0";
    }

    const firstVariant = product.variants[0];
    if (!firstVariant || !firstVariant.price || firstVariant.price <= 0) {
      return "0";
    }

    return firstVariant.price.toString();
  }

  /**
   * T√¨m s·∫£n ph·∫©m ph√π h·ª£p t·ª´ user message
   */
  private findMatchingProducts(
    message: string,
    availableProducts: any[]
  ): ProductRecommendation[] {
    if (!availableProducts || availableProducts.length === 0) {
      return [];
    }

    const keywords = this.extractProductKeywords(message);
    const lowerMessage = message.toLowerCase();

    // T√¨m s·∫£n ph·∫©m match v·ªõi keywords
    const matchedProducts = availableProducts.filter((product) => {
      const productName = product.name?.toLowerCase() || "";
      const productDesc = product.description?.toLowerCase() || "";
      const productCategory = product.category?.toLowerCase() || "";

      // Check exact keyword match
      const keywordMatch = keywords.some(
        (keyword) =>
          productName.includes(keyword.toLowerCase()) ||
          productDesc.includes(keyword.toLowerCase()) ||
          productCategory.includes(keyword.toLowerCase())
      );

      // Check semantic match
      const semanticMatch =
        (lowerMessage.includes("t·∫©y trang") &&
          (productName.includes("t·∫©y") ||
            productName.includes("l√†m s·∫°ch") ||
            productCategory.includes("cleanser"))) ||
        (lowerMessage.includes("d∆∞·ª°ng ·∫©m") &&
          (productName.includes("d∆∞·ª°ng") ||
            productName.includes("kem") ||
            productCategory.includes("moisturizer"))) ||
        (lowerMessage.includes("ch·ªëng n·∫Øng") &&
          (productName.includes("ch·ªëng n·∫Øng") ||
            productName.includes("spf") ||
            productCategory.includes("sunscreen"))) ||
        (lowerMessage.includes("tr·ªã m·ª•n") &&
          (productName.includes("m·ª•n") ||
            productName.includes("acne") ||
            productDesc.includes("m·ª•n"))) ||
        (lowerMessage.includes("toner") &&
          (productName.includes("toner") ||
            productName.includes("n∆∞·ªõc hoa h·ªìng"))) ||
        (lowerMessage.includes("serum") && productName.includes("serum"));

      return keywordMatch || semanticMatch;
    });

    // Convert to ProductRecommendation format
    return matchedProducts.slice(0, 3).map((product) => ({
      id: product.id,
      name: product.name,
      price: this.getFirstVariantPrice(product),
      image:
        product.image ||
        product.images?.[0] ||
        `https://via.placeholder.com/300x300/FF99CC/FFFFFF?text=${encodeURIComponent(
          product.name?.substring(0, 2) || "SP"
        )}`,
      description: product.description || "",
      category: product.category || "",
      reason: this.generateReasonForProduct(product, message),
      confidence: 0.9,
    }));
  }

  /**
   * T·∫°o recommendations d·ª±a tr√™n l·ªãch s·ª≠ mua h√†ng
   */
  private getRecommendationsBasedOnPurchaseHistory(
    availableProducts: any[],
    purchaseHistory: string[]
  ): ProductRecommendation[] {
    if (!purchaseHistory.length) return [];

    const recommendations: ProductRecommendation[] = [];

    // L·∫•y th√¥ng tin c√°c s·∫£n ph·∫©m ƒë√£ mua
    const purchasedProducts = purchaseHistory
      .map((id) => availableProducts.find((p) => p.id === id))
      .filter(Boolean)
      .slice(0, 3); // Ch·ªâ xem 3 s·∫£n ph·∫©m g·∫ßn nh·∫•t

    // console.log(
    //   "üì¶ Purchased products for analysis:",
    //   purchasedProducts.map((p) => p?.name)
    // );

    for (const purchasedProduct of purchasedProducts) {
      if (!purchasedProduct) continue;

      // T√¨m s·∫£n ph·∫©m c√πng category ho·∫∑c t∆∞∆°ng t·ª±
      const similarProducts = this.findSimilarProductsByCategory(
        availableProducts,
        purchasedProduct,
        recommendations.map((r) => r.id)
      );

      recommendations.push(...similarProducts);

      if (recommendations.length >= 5) break;
    }

    return recommendations.slice(0, 5);
  }

  /**
   * T√¨m s·∫£n ph·∫©m t∆∞∆°ng t·ª± d·ª±a tr√™n category v√† features
   */
  private findSimilarProductsByCategory(
    availableProducts: any[],
    referenceProduct: any,
    excludeIds: string[]
  ): ProductRecommendation[] {
    const category = referenceProduct.category?.toLowerCase() || "";
    const name = referenceProduct.name?.toLowerCase() || "";
    const recommendations: ProductRecommendation[] = [];

    // Ph√¢n lo·∫°i s·∫£n ph·∫©m ƒë·ªÉ t√¨m t∆∞∆°ng t·ª±
    const categoryKeywords = this.extractCategoryKeywords(name, category);

    const similarProducts = availableProducts.filter((product) => {
      if (
        excludeIds.includes(product.id) ||
        product.id === referenceProduct.id
      ) {
        return false;
      }

      const productName = product.name?.toLowerCase() || "";
      const productCategory = product.category?.toLowerCase() || "";

      // Ki·ªÉm tra c√πng category ch√≠nh x√°c
      if (productCategory === category) return true;

      // Ki·ªÉm tra keywords t∆∞∆°ng t·ª±
      return categoryKeywords.some(
        (keyword) =>
          productName.includes(keyword) || productCategory.includes(keyword)
      );
    });

    // Sort theo m·ª©c ƒë·ªô t∆∞∆°ng t·ª± v√† ch·ªçn top 2
    const scored = similarProducts
      .map((product) => ({
        product,
        score: this.calculateSimilarityScore(referenceProduct, product),
      }))
      .sort((a, b) => b.score - a.score)
      .slice(0, 2);

    for (const { product } of scored) {
      recommendations.push({
        id: product.id,
        name: product.name,
        price: this.getFirstVariantPrice(product),
        image:
          product.image ||
          product.images?.[0] ||
          this.generatePlaceholderImage(product.name),
        description: product.description || "",
        category: product.category || "",
        reason: this.generatePurchaseBasedReason(referenceProduct, product),
        confidence: 0.85,
      });
    }

    return recommendations;
  }

  /**
   * T·∫°o recommendations d·ª±a tr√™n s·∫£n ph·∫©m ƒë√£ xem
   */
  private getRecommendationsBasedOnViewed(
    availableProducts: any[],
    viewedProducts: string[],
    excludeIds: string[]
  ): ProductRecommendation[] {
    if (!viewedProducts.length) return [];

    const recommendations: ProductRecommendation[] = [];
    const recentViewed = viewedProducts.slice(0, 2); // 2 s·∫£n ph·∫©m xem g·∫ßn nh·∫•t

    for (const viewedId of recentViewed) {
      const viewedProduct = availableProducts.find((p) => p.id === viewedId);
      if (!viewedProduct) continue;

      const similar = this.findSimilarProductsByCategory(
        availableProducts,
        viewedProduct,
        [...excludeIds, ...recommendations.map((r) => r.id)]
      );

      // C·∫≠p nh·∫≠t reason cho viewed-based recommendations
      similar.forEach((rec) => {
        rec.reason = `V√¨ b·∫°n ƒë√£ xem ${viewedProduct.name}`;
        rec.confidence = 0.75;
      });

      recommendations.push(...similar);
      if (recommendations.length >= 3) break;
    }

    return recommendations.slice(0, 3);
  }

  /**
   * Lo·∫°i b·ªè recommendations tr√πng l·∫∑p
   */
  private removeDuplicateRecommendations(
    recommendations: ProductRecommendation[]
  ): ProductRecommendation[] {
    const seen = new Set<string>();
    return recommendations.filter((rec) => {
      if (seen.has(rec.id)) return false;
      seen.add(rec.id);
      return true;
    });
  }

  /**
   * Tr√≠ch xu·∫•t category keywords ƒë·ªÉ t√¨m s·∫£n ph·∫©m t∆∞∆°ng t·ª±
   */
  private extractCategoryKeywords(name: string, category: string): string[] {
    const keywords = new Set<string>();

    // Th√™m category ch√≠nh
    if (category) keywords.add(category);

    // Ph√¢n t√≠ch t√™n s·∫£n ph·∫©m ƒë·ªÉ t√¨m keywords
    const nameWords = name.split(/\s+/).map((w) => w.toLowerCase());

    // Skincare keywords
    const skincareKeywords = [
      "t·∫©y trang",
      "cleanser",
      "s·ªØa r·ª≠a m·∫∑t",
      "gel r·ª≠a m·∫∑t",
      "toner",
      "n∆∞·ªõc hoa h·ªìng",
      "serum",
      "tinh ch·∫•t",
      "kem d∆∞·ª°ng",
      "moisturizer",
      "kem ch·ªëng n·∫Øng",
      "sunscreen",
      "mask",
      "m·∫∑t n·∫°",
      "kem m·∫Øt",
      "eye cream",
    ];

    // Makeup keywords
    const makeupKeywords = [
      "kem n·ªÅn",
      "foundation",
      "concealer",
      "che khuy·∫øt ƒëi·ªÉm",
      "ph·∫•n ph·ªß",
      "powder",
      "m√° h·ªìng",
      "blush",
      "son m√¥i",
      "lipstick",
      "son b√≥ng",
      "lip gloss",
      "mascara",
      "eyeliner",
      "k·∫ª m·∫Øt",
      "ph·∫•n m·∫Øt",
      "eyeshadow",
    ];

    // Haircare keywords
    const haircareKeywords = [
      "d·∫ßu g·ªôi",
      "shampoo",
      "d·∫ßu x·∫£",
      "conditioner",
      "kem ·ªß t√≥c",
      "hair mask",
      "serum t√≥c",
      "hair serum",
    ];

    const allKeywords = [
      ...skincareKeywords,
      ...makeupKeywords,
      ...haircareKeywords,
    ];

    for (const keyword of allKeywords) {
      if (name.includes(keyword)) {
        keywords.add(keyword);
        // Th√™m t·ª´ ƒë·ªìng nghƒ©a
        if (keyword === "t·∫©y trang") keywords.add("cleanser");
        if (keyword === "kem d∆∞·ª°ng") keywords.add("moisturizer");
        if (keyword === "ch·ªëng n·∫Øng") keywords.add("sunscreen");
      }
    }

    return Array.from(keywords);
  }

  /**
   * T√≠nh ƒëi·ªÉm t∆∞∆°ng ƒë·ªìng gi·ªØa 2 s·∫£n ph·∫©m
   */
  private calculateSimilarityScore(product1: any, product2: any): number {
    let score = 0;

    // C√πng category: +0.5
    if (product1.category === product2.category) score += 0.5;

    // T√™n c√≥ t·ª´ kh√≥a chung: +0.3
    const name1Words = product1.name?.toLowerCase().split(/\s+/) || [];
    const name2Words = product2.name?.toLowerCase().split(/\s+/) || [];
    const commonWords = name1Words.filter((word: string) =>
      name2Words.includes(word)
    );
    if (commonWords.length > 0) score += 0.3;

    // Gi√° c·∫£ t∆∞∆°ng ƒë∆∞∆°ng (trong v√≤ng 50%): +0.2
    const price1 = parseInt(
      product1.price?.toString().replace(/\D/g, "") || "0"
    );
    const price2 = parseInt(
      product2.price?.toString().replace(/\D/g, "") || "0"
    );
    if (price1 > 0 && price2 > 0) {
      const priceDiff = Math.abs(price1 - price2) / Math.max(price1, price2);
      if (priceDiff <= 0.5) score += 0.2;
    }

    return score;
  }

  /**
   * T·∫°o l√Ω do ƒë·ªÅ xu·∫•t d·ª±a tr√™n s·∫£n ph·∫©m ƒë√£ mua
   */
  private generatePurchaseBasedReason(
    purchasedProduct: any,
    recommendedProduct: any
  ): string {
    const purchasedName = purchasedProduct.name?.toLowerCase() || "";
    const recommendedName = recommendedProduct.name?.toLowerCase() || "";

    // C√πng lo·∫°i s·∫£n ph·∫©m
    if (
      purchasedName.includes("t·∫©y trang") &&
      recommendedName.includes("t·∫©y trang")
    ) {
      return `T·∫©y trang kh√°c ph√π h·ª£p v·ªõi routine c·ªßa b·∫°n`;
    }

    if (purchasedName.includes("serum") && recommendedName.includes("serum")) {
      return `Serum b·ªï sung cho skincare routine`;
    }

    if (
      purchasedName.includes("kem d∆∞·ª°ng") &&
      recommendedName.includes("kem d∆∞·ª°ng")
    ) {
      return `Kem d∆∞·ª°ng thay th·∫ø ho·∫∑c d√πng lu√¢n phi√™n`;
    }

    if (purchasedName.includes("son") && recommendedName.includes("son")) {
      return `M√†u son m·ªõi ƒë·ªÉ thay ƒë·ªïi phong c√°ch`;
    }

    // S·∫£n ph·∫©m b·ªï sung
    if (
      purchasedName.includes("t·∫©y trang") &&
      recommendedName.includes("toner")
    ) {
      return `Toner b·ªï sung sau b∆∞·ªõc t·∫©y trang`;
    }

    if (purchasedName.includes("toner") && recommendedName.includes("serum")) {
      return `Serum s·ª≠ d·ª•ng sau toner ƒë·ªÉ tƒÉng hi·ªáu qu·∫£`;
    }

    if (purchasedProduct.category === recommendedProduct.category) {
      return `C√πng danh m·ª•c v·ªõi s·∫£n ph·∫©m b·∫°n ƒë√£ mua`;
    }

    return `Ph√π h·ª£p v·ªõi s·ªü th√≠ch c·ªßa b·∫°n`;
  }

  /**
   * T·∫°o placeholder image th√¥ng minh
   */
  private generatePlaceholderImage(productName: string): string {
    const initials = productName?.substring(0, 2).toUpperCase() || "SP";
    return `https://via.placeholder.com/300x300/FF99CC/FFFFFF?text=${encodeURIComponent(
      initials
    )}`;
  }

  /**
   * T·∫°o l√Ω do ƒë·ªÅ xu·∫•t s·∫£n ph·∫©m th√¥ng minh
   */
  private generateReasonForProduct(product: any, userMessage: string): string {
    const lowerMessage = userMessage.toLowerCase();
    const productName = product.name?.toLowerCase() || "";
    const productCategory = product.category?.toLowerCase() || "";

    // L√Ω do d·ª±a tr√™n lo·∫°i s·∫£n ph·∫©m v√† nhu c·∫ßu ng∆∞·ªùi d√πng
    if (
      lowerMessage.includes("da d·∫ßu") &&
      (productName.includes("toner") || productName.includes("gel"))
    ) {
      return "Ph√π h·ª£p cho da d·∫ßu, ki·ªÉm so√°t b√£ nh·ªùn";
    }

    if (
      lowerMessage.includes("da kh√¥") &&
      (productName.includes("kem") || productName.includes("d∆∞·ª°ng"))
    ) {
      return "Cung c·∫•p ƒë·ªô ·∫©m cho da kh√¥";
    }

    if (
      lowerMessage.includes("m·ª•n") &&
      (productName.includes("tr·ªã m·ª•n") || productName.includes("acne"))
    ) {
      return "Hi·ªáu qu·∫£ trong vi·ªác ƒëi·ªÅu tr·ªã m·ª•n";
    }

    if (lowerMessage.includes("ch·ªëng n·∫Øng") && productName.includes("spf")) {
      return "B·∫£o v·ªá da kh·ªèi tia UV c√≥ h·∫°i";
    }

    if (lowerMessage.includes("t·∫©y trang") && productName.includes("t·∫©y")) {
      return "L√†m s·∫°ch s√¢u, lo·∫°i b·ªè makeup hi·ªáu qu·∫£";
    }

    if (lowerMessage.includes("serum") && productName.includes("serum")) {
      return "Cung c·∫•p d∆∞·ª°ng ch·∫•t t·∫≠p trung";
    }

    if (lowerMessage.includes("d∆∞·ª°ng ·∫©m") && productName.includes("d∆∞·ª°ng")) {
      return "C·∫•p ·∫©m v√† nu√¥i d∆∞·ª°ng da";
    }

    // L√Ω do m·∫∑c ƒë·ªãnh d·ª±a tr√™n category
    if (productCategory.includes("skincare")) {
      return "S·∫£n ph·∫©m chƒÉm s√≥c da ch·∫•t l∆∞·ª£ng";
    } else if (productCategory.includes("makeup")) {
      return "Trang ƒëi·ªÉm t·ª± nhi√™n, b·ªÅn m√†u";
    } else if (productCategory.includes("serum")) {
      return "Tinh ch·∫•t d∆∞·ª°ng da hi·ªáu qu·∫£";
    }

    return "ƒê∆∞·ª£c nhi·ªÅu kh√°ch h√†ng tin d√πng";
  }

  /**
   * Reset rate limit timer (for new API key)
   */
  resetRateLimit() {
    this.lastRequestTime = 0;
    // console.log("üîÑ Rate limit timer reset for new API key");
  }

  /**
   * ƒê·ªïi AI provider
   */
  switchProvider(provider: "openai" | "gemini") {
    this.currentProvider = provider;
  }
}

const aiServiceInstance = new AIService();
// Reset rate limit for new API key
aiServiceInstance.resetRateLimit();

export const aiService = aiServiceInstance;
