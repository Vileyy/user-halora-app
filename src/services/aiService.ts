import axios from "axios";

// Interface cho AI responses
export interface ChatMessage {
  id: string;
  text: string;
  isUser: boolean;
  timestamp: Date;
}

export interface ProductRecommendation {
  id: string;
  name: string;
  price: string;
  image: string;
  description: string;
  category: string;
  reason: string; // L√Ω do ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t
  confidence: number; // ƒê·ªô tin c·∫≠y (0-1)
}

export interface BeautyAdviceResponse {
  advice: string;
  recommendedProducts?: ProductRecommendation[];
  skinType?: string;
  concerns?: string[];
}

// C·∫•u h√¨nh AI API - c√≥ th·ªÉ d√πng OpenAI ho·∫∑c Gemini
const AI_API_CONFIG = {
  // S·ª≠ d·ª•ng OpenAI API
  openai: {
    baseURL: "https://api.openai.com/v1",
    model: "gpt-3.5-turbo",
    apiKey: process.env.EXPO_PUBLIC_OPENAI_API_KEY || "",
  },
  // Ho·∫∑c s·ª≠ d·ª•ng Gemini API
  gemini: {
    baseURL: "https://generativelanguage.googleapis.com/v1beta",
    model: "gemini-1.5-flash",
    apiKey:
      process.env.EXPO_PUBLIC_GEMINI_API_KEY ||
      "AIzaSyBcd8kxN9w_reBKovGp77VQQJWDnTif3a0",
  },
};

class AIService {
  private currentProvider: "openai" | "gemini" = "gemini";
  private lastRequestTime: number = 0;
  private minRequestInterval: number = 2000; // 2 seconds between requests (reduced for new API key)

  /**
   * Wait for rate limit cooldown
   */
  private async waitForRateLimit(): Promise<void> {
    const now = Date.now();
    const timeSinceLastRequest = now - this.lastRequestTime;

    if (timeSinceLastRequest < this.minRequestInterval) {
      const waitTime = this.minRequestInterval - timeSinceLastRequest;
      console.log(`‚è≥ Rate limit: waiting ${waitTime}ms...`);
      await new Promise((resolve) => setTimeout(resolve, waitTime));
    }

    this.lastRequestTime = Date.now();
  }

  /**
   * G·ªçi API ƒë·ªÉ l·∫•y t∆∞ v·∫•n m·ªπ ph·∫©m
   */
  async getCosmeticAdvice(
    userMessage: string,
    userInfo?: {
      skinType?: string;
      age?: number;
      concerns?: string[];
      currentProducts?: string[];
    },
    availableProducts?: any[]
  ): Promise<BeautyAdviceResponse> {
    try {
      // Wait for rate limit
      await this.waitForRateLimit();

      const prompt = this.buildCosmeticAdvicePrompt(
        userMessage,
        userInfo,
        availableProducts
      );

      if (this.currentProvider === "openai") {
        const response = await this.callOpenAI(prompt);
        return {
          ...response,
          recommendedProducts: this.findMatchingProducts(
            userMessage,
            availableProducts || []
          ),
        };
      } else {
        const response = await this.callGemini(prompt);
        if (response) {
          return {
            ...response,
            recommendedProducts: this.findMatchingProducts(
              userMessage,
              availableProducts || []
            ),
          };
        } else {
          // API failed, use offline advice
          throw new Error("API failed, using offline advice");
        }
      }
    } catch (error) {
      console.error("AI Service Error:", error);

      // Fallback: tr·∫£ v·ªÅ response c∆° b·∫£n
      return {
        advice: this.getOfflineAdvice(userMessage),
        recommendedProducts: this.findMatchingProducts(
          userMessage,
          availableProducts || []
        ),
      };
    }
  }

  /**
   * Offline advice khi AI kh√¥ng ho·∫°t ƒë·ªông
   */
  private getOfflineAdvice(userMessage: string): string {
    const lowerMessage = userMessage.toLowerCase();

    if (lowerMessage.includes("t·∫©y trang")) {
      return `üß¥ **T∆∞ v·∫•n v·ªÅ t·∫©y trang:**

ƒê·ªÉ ch·ªçn s·∫£n ph·∫©m t·∫©y trang ph√π h·ª£p:

‚Ä¢ **Da d·∫ßu**: Gel t·∫©y trang ho·∫∑c micellar water
‚Ä¢ **Da kh√¥**: Oil cleanser ho·∫∑c s·ªØa t·∫©y trang
‚Ä¢ **Da nh·∫°y c·∫£m**: S·∫£n ph·∫©m kh√¥ng c·ªìn, pH c√¢n b·∫±ng

**C√°ch s·ª≠ d·ª•ng:**
1. Massage nh·∫π nh√†ng 30 gi√¢y
2. R·ª≠a s·∫°ch v·ªõi n∆∞·ªõc ·∫•m
3. Thoa kem d∆∞·ª°ng ·∫©m sau

B·∫°n c√≥ th·ªÉ tham kh·∫£o c√°c s·∫£n ph·∫©m t·∫©y trang ph√π h·ª£p trong c·ª≠a h√†ng c·ªßa ch√∫ng t√¥i! üí´`;
    }

    if (lowerMessage.includes("serum")) {
      return `‚ú® **T∆∞ v·∫•n v·ªÅ serum:**

Serum l√† b∆∞·ªõc quan tr·ªçng trong routine skincare:

‚Ä¢ **Vitamin C**: Ch·ªëng oxy h√≥a, d√πng bu·ªïi s√°ng
‚Ä¢ **Niacinamide**: Thu nh·ªè l·ªó ch√¢n l√¥ng, ki·ªÉm so√°t d·∫ßu
‚Ä¢ **Hyaluronic Acid**: C·∫•p ·∫©m s√¢u
‚Ä¢ **Retinol**: Ch·ªëng l√£o h√≥a, d√πng bu·ªïi t·ªëi

**Th·ª© t·ª± s·ª≠ d·ª•ng:** Toner ‚Üí Serum ‚Üí Kem d∆∞·ª°ng

H√£y xem c√°c s·∫£n ph·∫©m serum ch·∫•t l∆∞·ª£ng trong shop nh√©! üåü`;
    }

    if (
      lowerMessage.includes("kem d∆∞·ª°ng") ||
      lowerMessage.includes("d∆∞·ª°ng ·∫©m")
    ) {
      return `üíß **T∆∞ v·∫•n v·ªÅ kem d∆∞·ª°ng ·∫©m:**

Ch·ªçn kem d∆∞·ª°ng theo lo·∫°i da:

‚Ä¢ **Da d·∫ßu**: Kem d∆∞·ª°ng gel, texture nh·∫π
‚Ä¢ **Da kh√¥**: Kem d∆∞·ª°ng gi√†u ceramide, shea butter  
‚Ä¢ **Da h·ªón h·ª£p**: Kem d∆∞·ª°ng c√¢n b·∫±ng
‚Ä¢ **Da nh·∫°y c·∫£m**: Kh√¥ng m√πi, kh√¥ng c·ªìn

**Tips:** Thoa kem khi da c√≤n ·∫©m ƒë·ªÉ lock moisture t·ªët h∆°n!

Kh√°m ph√° b·ªô s∆∞u t·∫≠p kem d∆∞·ª°ng ƒëa d·∫°ng c·ªßa ch√∫ng t√¥i! üß¥`;
    }

    // Default response
    return `üëã **Xin ch√†o!**

C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá v·ªõi tr·ª£ l√Ω t∆∞ v·∫•n m·ªπ ph·∫©m Halora! 

Hi·ªán t·∫°i h·ªá th·ªëng AI ƒëang b·∫£o tr√¨ (do rate limit), nh∆∞ng b·∫°n v·∫´n c√≥ th·ªÉ:

üõçÔ∏è **Xem s·∫£n ph·∫©m** ƒë∆∞·ª£c g·ª£i √Ω d∆∞·ªõi ƒë√¢y
üîç **T√¨m ki·∫øm** s·∫£n ph·∫©m theo danh m·ª•c  
üí¨ **Li√™n h·ªá** nh√¢n vi√™n t∆∞ v·∫•n qua hotline
üìñ **ƒê·ªçc** reviews t·ª´ kh√°ch h√†ng kh√°c

Vui l√≤ng ƒë·ª£i 5-10 ph√∫t ƒë·ªÉ h·ªá th·ªëng AI ho·∫°t ƒë·ªông tr·ªü l·∫°i! ‚ú®`;
  }

  /**
   * L·∫•y g·ª£i √Ω s·∫£n ph·∫©m th√¥ng minh d·ª±a tr√™n l·ªãch s·ª≠ v√† preferences
   */
  async getSmartRecommendations(
    userId: string,
    currentProducts: any[],
    userBehavior: {
      viewedProducts?: string[];
      purchaseHistory?: string[];
      favorites?: string[];
      searchHistory?: string[];
    }
  ): Promise<ProductRecommendation[]> {
    try {
      // Wait for rate limit
      await this.waitForRateLimit();

      const prompt = this.buildRecommendationPrompt(
        currentProducts,
        userBehavior
      );

      if (this.currentProvider === "openai") {
        const response = await this.callOpenAI(prompt);
        return this.parseRecommendations(response.advice, currentProducts);
      } else {
        const response = await this.callGemini(prompt);
        if (response) {
          return this.parseRecommendations(response.advice, currentProducts);
        } else {
          // API failed, use fallback
          throw new Error("API failed, using fallback");
        }
      }
    } catch (error) {
      console.error("Smart Recommendations Error:", error);
      // Fallback: tr·∫£ v·ªÅ recommendations ƒë∆°n gi·∫£n d·ª±a tr√™n category
      return this.getFallbackRecommendations(currentProducts);
    }
  }

  /**
   * G·ªçi OpenAI API
   */
  private async callOpenAI(prompt: string): Promise<BeautyAdviceResponse> {
    const config = AI_API_CONFIG.openai;

    const response = await axios.post(
      `${config.baseURL}/chat/completions`,
      {
        model: config.model,
        messages: [
          {
            role: "system",
            content:
              "B·∫°n l√† chuy√™n gia t∆∞ v·∫•n m·ªπ ph·∫©m chuy√™n nghi·ªáp. H√£y ƒë∆∞a ra l·ªùi khuy√™n h·ªØu √≠ch, an to√†n v√† ph√π h·ª£p v·ªõi t·ª´ng lo·∫°i da.",
          },
          {
            role: "user",
            content: prompt,
          },
        ],
        max_tokens: 500,
        temperature: 0.7,
      },
      {
        headers: {
          Authorization: `Bearer ${config.apiKey}`,
          "Content-Type": "application/json",
        },
      }
    );

    return {
      advice: response.data.choices[0].message.content,
      skinType: this.extractSkinType(response.data.choices[0].message.content),
      concerns: this.extractConcerns(response.data.choices[0].message.content),
    };
  }

  /**
   * G·ªçi Gemini API v·ªõi fallback endpoints
   */
  private async callGemini(prompt: string): Promise<BeautyAdviceResponse> {
    const config = AI_API_CONFIG.gemini;

    // Debug logs
    console.log("üîß Gemini API Config:", {
      apiKey: config.apiKey.substring(0, 10) + "...",
      model: config.model,
      baseURL: config.baseURL,
    });

    // S·ª≠ d·ª•ng endpoint ·ªïn ƒë·ªãnh nh·∫•t
    const endpoints = [
      {
        baseURL: "https://generativelanguage.googleapis.com/v1beta",
        model: "gemini-1.5-flash",
      },
    ];

    const payload = {
      contents: [
        {
          parts: [
            {
              text: `B·∫°n l√† chuy√™n gia t∆∞ v·∫•n m·ªπ ph·∫©m chuy√™n nghi·ªáp. H√£y ƒë∆∞a ra l·ªùi khuy√™n h·ªØu √≠ch, an to√†n v√† ph√π h·ª£p v·ªõi t·ª´ng lo·∫°i da. ${prompt}`,
            },
          ],
        },
      ],
      generationConfig: {
        temperature: 0.7,
        maxOutputTokens: 500,
        topK: 40,
        topP: 0.95,
      },
      safetySettings: [
        {
          category: "HARM_CATEGORY_HARASSMENT",
          threshold: "BLOCK_MEDIUM_AND_ABOVE",
        },
        {
          category: "HARM_CATEGORY_HATE_SPEECH",
          threshold: "BLOCK_MEDIUM_AND_ABOVE",
        },
      ],
    };

    // Th·ª≠ t·ª´ng endpoint cho ƒë·∫øn khi th√†nh c√¥ng
    for (const endpoint of endpoints) {
      try {
        const url = `${endpoint.baseURL}/models/${endpoint.model}:generateContent?key=${config.apiKey}`;
        console.log("üîó Trying URL:", url);

        const response = await axios.post(url, payload, {
          headers: {
            "Content-Type": "application/json",
          },
          timeout: 10000,
        });

        const advice = response.data.candidates[0].content.parts[0].text;
        console.log("‚úÖ Gemini API Success with:", endpoint.model);

        return {
          advice,
          skinType: this.extractSkinType(advice),
          concerns: this.extractConcerns(advice),
        };
      } catch (error: any) {
        const status = error.response?.status;
        console.log(
          `‚ùå Failed with ${endpoint.model}:`,
          status || error.message
        );

        if (status === 429) {
          console.log("‚ö†Ô∏è Rate limit exceeded, will use offline advice");
          break; // Break ƒë·ªÉ return offline advice
        } else if (status === 403) {
          console.log("‚ö†Ô∏è API key invalid, will use offline advice");
          break;
        } else if (status === 404) {
          console.log("‚ùå Endpoint kh√¥ng t·ªìn t·∫°i, th·ª≠ endpoint kh√°c...");
          continue;
        }

        console.log(`‚ö†Ô∏è API Error ${status}, will use offline advice`);
        break;
      }
    }

    // N·∫øu t·∫•t c·∫£ endpoints ƒë·ªÅu fail, return null ƒë·ªÉ trigger fallback
    return null as any;
  }

  /**
   * X√¢y d·ª±ng prompt cho t∆∞ v·∫•n m·ªπ ph·∫©m
   */
  private buildCosmeticAdvicePrompt(
    userMessage: string,
    userInfo?: {
      skinType?: string;
      age?: number;
      concerns?: string[];
      currentProducts?: string[];
    },
    availableProducts?: any[]
  ): string {
    let prompt = `Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}"\n\n`;

    if (userInfo) {
      if (userInfo.skinType) {
        prompt += `Lo·∫°i da: ${userInfo.skinType}\n`;
      }
      if (userInfo.age) {
        prompt += `Tu·ªïi: ${userInfo.age}\n`;
      }
      if (userInfo.concerns?.length) {
        prompt += `V·∫•n ƒë·ªÅ da: ${userInfo.concerns.join(", ")}\n`;
      }
      if (userInfo.currentProducts?.length) {
        prompt += `S·∫£n ph·∫©m ƒëang d√πng: ${userInfo.currentProducts.join(
          ", "
        )}\n`;
      }
    }

    // Th√™m th√¥ng tin s·∫£n ph·∫©m c√≥ s·∫µn n·∫øu user h·ªèi v·ªÅ s·∫£n ph·∫©m c·ª• th·ªÉ
    if (availableProducts && availableProducts.length > 0) {
      const productKeywords = this.extractProductKeywords(userMessage);
      const relevantProducts = availableProducts
        .filter((product) =>
          productKeywords.some(
            (keyword) =>
              product.name?.toLowerCase().includes(keyword.toLowerCase()) ||
              product.category?.toLowerCase().includes(keyword.toLowerCase()) ||
              product.description?.toLowerCase().includes(keyword.toLowerCase())
          )
        )
        .slice(0, 5);

      if (relevantProducts.length > 0) {
        prompt += `\nS·∫£n ph·∫©m c√≥ s·∫µn trong c·ª≠a h√†ng:\n`;
        relevantProducts.forEach((product, index) => {
          prompt += `${index + 1}. ${product.name} - ${product.price} VNƒê\n`;
          prompt += `   M√¥ t·∫£: ${product.description || "Kh√¥ng c√≥ m√¥ t·∫£"}\n`;
        });
        prompt += `\nH√£y ƒë·ªÅ xu·∫•t s·∫£n ph·∫©m ph√π h·ª£p t·ª´ danh s√°ch tr√™n n·∫øu c√≥.\n`;
      }
    }

    prompt += `\nH√£y ƒë∆∞a ra l·ªùi khuy√™n chi ti·∫øt, an to√†n v√† ph√π h·ª£p. T·∫≠p trung v√†o:
1. Ph√¢n t√≠ch v·∫•n ƒë·ªÅ v√† nhu c·∫ßu
2. ƒê·ªÅ xu·∫•t gi·∫£i ph√°p c·ª• th·ªÉ
3. Th√†nh ph·∫ßn n√™n t√¨m ki·∫øm
4. L∆∞u √Ω khi s·ª≠ d·ª•ng
5. Routine chƒÉm s√≥c da ph√π h·ª£p
6. G·ª£i √Ω s·∫£n ph·∫©m c·ª• th·ªÉ t·ª´ c·ª≠a h√†ng (n·∫øu c√≥)

Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, ng·∫Øn g·ªçn nh∆∞ng ƒë·∫ßy ƒë·ªß th√¥ng tin.`;

    return prompt;
  }

  /**
   * X√¢y d·ª±ng prompt cho recommendations
   */
  private buildRecommendationPrompt(
    currentProducts: any[],
    userBehavior: any
  ): string {
    const productCategories = [
      ...new Set(currentProducts.map((p) => p.category)),
    ];
    const viewedCategories = userBehavior.viewedProducts || [];

    return `D·ª±a tr√™n h√†nh vi ng∆∞·ªùi d√πng:
- Danh m·ª•c s·∫£n ph·∫©m hi·ªán c√≥: ${productCategories.join(", ")}
- S·∫£n ph·∫©m ƒë√£ xem: ${viewedCategories.slice(0, 5).join(", ")}
- L·ªãch s·ª≠ t√¨m ki·∫øm: ${
      userBehavior.searchHistory?.slice(0, 3).join(", ") || "kh√¥ng c√≥"
    }

H√£y g·ª£i √Ω 3-5 s·∫£n ph·∫©m m·ªπ ph·∫©m ph√π h·ª£p nh·∫•t v·ªõi format:
[T√äN S·∫¢N PH·∫®M] - [L√ù DO ƒê·ªÄ XU·∫§T] - [ƒê·ªò TIN C·∫¨Y 0-1]

V√≠ d·ª•:
Kem d∆∞·ª°ng ·∫©m Vitamin C - Ph√π h·ª£p v·ªõi da kh√¥, b·ªï sung vitamin - 0.9`;
  }

  /**
   * Parse recommendations t·ª´ AI response
   */
  private parseRecommendations(
    aiResponse: string,
    availableProducts: any[]
  ): ProductRecommendation[] {
    const recommendations: ProductRecommendation[] = [];

    // Logic ƒë∆°n gi·∫£n ƒë·ªÉ match AI response v·ªõi products c√≥ s·∫µn
    // Trong th·ª±c t·∫ø, c·∫ßn AI response c√≥ format structured h∆°n
    const lines = aiResponse.split("\n").filter((line) => line.includes("-"));

    lines.forEach((line, index) => {
      if (index >= 5) return; // T·ªëi ƒëa 5 recommendations

      const parts = line.split("-");
      if (parts.length >= 2) {
        // T√¨m product ph√π h·ª£p trong database
        const matchedProduct = this.findSimilarProduct(
          parts[0].trim(),
          availableProducts
        );

        if (matchedProduct) {
          recommendations.push({
            ...matchedProduct,
            reason: parts[1]?.trim() || "ƒê∆∞·ª£c AI ƒë·ªÅ xu·∫•t",
            confidence: parseFloat(parts[2]?.trim()) || 0.8,
          });
        }
      }
    });

    return recommendations;
  }

  /**
   * T√¨m s·∫£n ph·∫©m t∆∞∆°ng t·ª± trong database
   */
  private findSimilarProduct(searchTerm: string, products: any[]): any | null {
    const normalized = searchTerm.toLowerCase();

    // T√¨m theo t√™n ch√≠nh x√°c
    let found = products.find((p) => p.name.toLowerCase().includes(normalized));

    // T√¨m theo category n·∫øu kh√¥ng c√≥ t√™n
    if (!found) {
      const categories = ["serum", "cream", "kem", "s·ªØa", "toner", "mask"];
      const matchedCategory = categories.find((cat) =>
        normalized.includes(cat)
      );

      if (matchedCategory) {
        const categoryProducts = products.filter(
          (p) =>
            p.category?.toLowerCase().includes(matchedCategory) ||
            p.name.toLowerCase().includes(matchedCategory)
        );
        found =
          categoryProducts[Math.floor(Math.random() * categoryProducts.length)];
      }
    }

    return found || null;
  }

  /**
   * Fallback recommendations khi AI kh√¥ng kh·∫£ d·ª•ng
   */
  private getFallbackRecommendations(products: any[]): ProductRecommendation[] {
    const shuffled = [...products].sort(() => 0.5 - Math.random());

    return shuffled.slice(0, 5).map((product) => ({
      ...product,
      reason: "S·∫£n ph·∫©m ph·ªï bi·∫øn",
      confidence: 0.6,
    }));
  }

  /**
   * Tr√≠ch xu·∫•t skin type t·ª´ AI response
   */
  private extractSkinType(text: string): string | undefined {
    const skinTypes = [
      "da kh√¥",
      "da d·∫ßu",
      "da h·ªón h·ª£p",
      "da nh·∫°y c·∫£m",
      "da th∆∞·ªùng",
    ];
    return skinTypes.find((type) => text.toLowerCase().includes(type));
  }

  /**
   * Tr√≠ch xu·∫•t concerns t·ª´ AI response
   */
  private extractConcerns(text: string): string[] {
    const concerns = [
      "m·ª•n",
      "n√°m",
      "th√¢m",
      "nhƒÉn",
      "l√£o h√≥a",
      "kh√¥ r√°p",
      "d·∫ßu th·ª´a",
    ];
    return concerns.filter((concern) => text.toLowerCase().includes(concern));
  }

  /**
   * Tr√≠ch xu·∫•t keywords s·∫£n ph·∫©m t·ª´ user message
   */
  private extractProductKeywords(message: string): string[] {
    const productKeywords = [
      // Skincare
      "t·∫©y trang",
      "cleanser",
      "s·ªØa r·ª≠a m·∫∑t",
      "gel r·ª≠a m·∫∑t",
      "toner",
      "n∆∞·ªõc hoa h·ªìng",
      "serum",
      "tinh ch·∫•t",
      "kem d∆∞·ª°ng",
      "moisturizer",
      "kem ch·ªëng n·∫Øng",
      "sunscreen",
      "mask",
      "m·∫∑t n·∫°",
      "kem m·∫Øt",
      "eye cream",
      "kem tr·ªã m·ª•n",
      "acne cream",
      "kem tr·∫Øng da",
      "whitening cream",

      // Makeup
      "kem n·ªÅn",
      "foundation",
      "concealer",
      "che khuy·∫øt ƒëi·ªÉm",
      "ph·∫•n ph·ªß",
      "powder",
      "m√° h·ªìng",
      "blush",
      "son m√¥i",
      "lipstick",
      "son b√≥ng",
      "lip gloss",
      "mascara",
      "eyeliner",
      "k·∫ª m·∫Øt",
      "ph·∫•n m·∫Øt",
      "eyeshadow",

      // Haircare
      "d·∫ßu g·ªôi",
      "shampoo",
      "d·∫ßu x·∫£",
      "conditioner",
      "kem ·ªß t√≥c",
      "hair mask",
      "serum t√≥c",
      "hair serum",

      // Body care
      "s·ªØa t·∫Øm",
      "body wash",
      "kem body",
      "body lotion",
      "d∆∞·ª°ng th·ªÉ",
      "body cream",
    ];

    const lowerMessage = message.toLowerCase();
    return productKeywords.filter((keyword) =>
      lowerMessage.includes(keyword.toLowerCase())
    );
  }

  /**
   * T√¨m s·∫£n ph·∫©m ph√π h·ª£p t·ª´ user message
   */
  private findMatchingProducts(
    message: string,
    availableProducts: any[]
  ): ProductRecommendation[] {
    if (!availableProducts || availableProducts.length === 0) {
      return [];
    }

    const keywords = this.extractProductKeywords(message);
    const lowerMessage = message.toLowerCase();

    // T√¨m s·∫£n ph·∫©m match v·ªõi keywords
    const matchedProducts = availableProducts.filter((product) => {
      const productName = product.name?.toLowerCase() || "";
      const productDesc = product.description?.toLowerCase() || "";
      const productCategory = product.category?.toLowerCase() || "";

      // Check exact keyword match
      const keywordMatch = keywords.some(
        (keyword) =>
          productName.includes(keyword.toLowerCase()) ||
          productDesc.includes(keyword.toLowerCase()) ||
          productCategory.includes(keyword.toLowerCase())
      );

      // Check semantic match
      const semanticMatch =
        (lowerMessage.includes("t·∫©y trang") &&
          (productName.includes("t·∫©y") ||
            productName.includes("l√†m s·∫°ch") ||
            productCategory.includes("cleanser"))) ||
        (lowerMessage.includes("d∆∞·ª°ng ·∫©m") &&
          (productName.includes("d∆∞·ª°ng") ||
            productName.includes("kem") ||
            productCategory.includes("moisturizer"))) ||
        (lowerMessage.includes("ch·ªëng n·∫Øng") &&
          (productName.includes("ch·ªëng n·∫Øng") ||
            productName.includes("spf") ||
            productCategory.includes("sunscreen"))) ||
        (lowerMessage.includes("tr·ªã m·ª•n") &&
          (productName.includes("m·ª•n") ||
            productName.includes("acne") ||
            productDesc.includes("m·ª•n"))) ||
        (lowerMessage.includes("toner") &&
          (productName.includes("toner") ||
            productName.includes("n∆∞·ªõc hoa h·ªìng"))) ||
        (lowerMessage.includes("serum") && productName.includes("serum"));

      return keywordMatch || semanticMatch;
    });

    // Convert to ProductRecommendation format
    return matchedProducts.slice(0, 3).map((product) => ({
      id: product.id,
      name: product.name,
      price: product.price?.toString() || "0",
      image: product.image || "",
      description: product.description || "",
      category: product.category || "",
      reason: "S·∫£n ph·∫©m ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n",
      confidence: 0.9,
    }));
  }

  /**
   * Reset rate limit timer (for new API key)
   */
  resetRateLimit() {
    this.lastRequestTime = 0;
    console.log("üîÑ Rate limit timer reset for new API key");
  }

  /**
   * ƒê·ªïi AI provider
   */
  switchProvider(provider: "openai" | "gemini") {
    this.currentProvider = provider;
  }
}

const aiServiceInstance = new AIService();
// Reset rate limit for new API key
aiServiceInstance.resetRateLimit();

export const aiService = aiServiceInstance;
